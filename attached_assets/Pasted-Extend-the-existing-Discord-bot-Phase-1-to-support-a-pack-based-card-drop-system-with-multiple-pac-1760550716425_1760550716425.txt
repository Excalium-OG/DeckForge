Extend the existing Discord bot (Phase 1) to support a pack-based card drop system with multiple pack types, inventory limits, and trading scaffolding. Use discord.py and PostgreSQL via asyncpg. Bot prefix is `!`.

---

üéØ Scope

‚úÖ Pack Types

Implement three pack types:

‚Ä¢ `Normal Pack`: Uses base rarity drop rates
‚Ä¢ `Booster Pack`: Doubles the drop rate for higher rarities
‚Ä¢ `Booster Pack+`: Triples the drop rate for higher rarities


Each pack gives 2 cards when opened.

---

‚úÖ Pack Inventory System

Create a new table to track pack inventory per user:

CREATE TABLE user_packs (
  user_id BIGINT,
  pack_type TEXT,
  quantity INT,
  PRIMARY KEY (user_id, pack_type)
);

‚Ä¢ Enforce a maximum of 30 total packs per user across all types.
‚Ä¢ Reject `!claimfreepack` or trades that would exceed this cap.


---

‚úÖ Commands

Command	Description	
!claimfreepack	Adds 1 Normal Pack every 8 hours (if under cap)	
!drop [amount] [pack_type]	Opens specified number of packs (default: Normal)	
!mypacks	Lists current pack inventory	
!offerpack [@user] [pack_type] [quantity]	Placeholder for initiating a pack trade	
!acceptpacktrade [trade_id]	Placeholder for accepting a trade	


---

‚úÖ Drop Rate Modifiers

Use the following base rarity distribution:

Rarity	Base Rate (%)	
Common	40	
Uncommon	25	
Exceptional	15	
Rare	10	
Epic	6	
Legendary	3	
Mythic	1	


Apply modifiers:

‚Ä¢ Booster Pack: Multiply higher rarity rates by 2
‚Ä¢ Booster Pack+: Multiply higher rarity rates by 3
‚Ä¢ Normalize total to 100% before rolling


---

‚úÖ Trading Scaffolding

Create a placeholder table for pack trades:

CREATE TABLE pack_trades (
  trade_id UUID PRIMARY KEY,
  sender_id BIGINT,
  receiver_id BIGINT,
  pack_type TEXT,
  quantity INT,
  status TEXT DEFAULT 'pending',
  created_at TIMESTAMP DEFAULT now()
);

No trade logic yet‚Äîjust scaffolding and placeholder commands.

---

üîê Permissions & Validation

‚Ä¢ Enforce 8-hour cooldown for `!claimfreepack`
‚Ä¢ Validate pack type against allowed values
‚Ä¢ Enforce inventory cap of 30 packs
‚Ä¢ Reject `!drop` if user lacks sufficient packs
‚Ä¢ Restrict trading commands to valid users


---

üóÇÔ∏è File-Level Tasks

‚Ä¢ `db/migrations/0003_pack_system.sql`: Create `user_packs` and `pack_trades`
‚Ä¢ `cogs/packs.py`: Implement all new commands
‚Ä¢ `utils/drop_logic.py`: Handle rarity weighting and modifiers
‚Ä¢ `tests/test_packs.py`: Validate pack claiming, dropping, and inventory limits