Extend the existing Discord bot (DeckForge) to support improved inventory management, card recycling, a multi-step trading system, and a web-based admin interface. Use discord.py and PostgreSQL via asyncpg. Bot prefix is `?`.

---

🎯 Scope

✅ Inventory UX Overhaul

• Modify `?mycards` to group identical cards:• Format: `(x7) Falcon 9 (ID: 1)`
• Show up to 8 lines per page
• Use left/right reaction emojis to scroll pages

• Remove image previews from inventory display


---

✅ Recycling System

• Replace `?recycle [instance_id]` with:?recycle [card_id] [amount]
• Bot checks user inventory for matching card ID and quantity
• If available, remove specified number of instances and credit user
• Add `recycled_at` timestamp to deleted cards (optional logging)


---

✅ Trading System

🗃️ Database Tables

CREATE TABLE trades (
  trade_id UUID PRIMARY KEY,
  initiator_id BIGINT,
  responder_id BIGINT,
  status TEXT DEFAULT 'pending',
  started_at TIMESTAMP,
  finalized_at TIMESTAMP
);

CREATE TABLE trade_items (
  trade_id UUID REFERENCES trades(trade_id),
  user_id BIGINT,
  card_id INT,
  quantity INT
);

🛠️ Commands

Command	Description	
?requesttrade @user	Initiates trade session	
?accepttrade	Accepts trade request or confirms trade	
?tradeadd [card_id] [amount]	Adds cards to trade pool	
?traderemove [card_id] [amount]	Removes cards from trade pool	
?finalize	Final confirmation after both users accept	


🔁 Trade Flow

1. Player A: `?requesttrade @PlayerB`
2. Player B: `?accepttrade`
3. 5-minute trade window begins
4. Both players use `?tradeadd` / `?traderemove`
5. Both use `?accepttrade` → bot asks “Are you sure?”
6. Both use `?finalize` → trade completes


• Bot displays trade pool visually after each change
• Cards are transferred between inventories on finalize
• Trade expires after 5 minutes if not finalized


---

🌐 Web Admin Panel

🔐 Auth

• Admins log in via Discord OAuth
• Only approved Discord IDs can access panel


🛠️ Features

• View all cards
• Add/edit cards with the following fields:• Name
• Description
• Height
• Diameter
• Thrust
• Payload to LEO
• Reusability: Expendable / Partially Reusable / Fully Reusable
• Image upload



🗃️ Backend

• Store new fields in `cards` table:


ALTER TABLE cards ADD COLUMN height TEXT;
ALTER TABLE cards ADD COLUMN diameter TEXT;
ALTER TABLE cards ADD COLUMN thrust TEXT;
ALTER TABLE cards ADD COLUMN payload_leo TEXT;
ALTER TABLE cards ADD COLUMN reusability TEXT;

---

🔐 Validation & UX

• Validate card quantities before recycling or trading
• Prevent duplicate trades or expired sessions
• Ensure inventory pagination works with reactions
• Confirm admin-only access to web panel


---

🗂️ File-Level Tasks

• `db/migrations/0004_phase2.sql`: Add trade tables and card fields
• `cogs/inventory.py`: Update `?mycards`, `?recycle`
• `cogs/trading.py`: Implement trade flow
• `web/admin_panel.py`: Flask or FastAPI app with Discord OAuth
• `tests/test_trading.py`: Validate trade logic and edge cases