Build a Discord bot using discord.py that supports a collectible trading card system themed around rockets. This is Phase 1 of a multi-phase rollout. Deliver production-ready code, database migrations, and modular command logic. Use PostgreSQL via asyncpg. The bot uses `!` as its command prefix.

---

üéØ Scope

Implement the following features:

‚úÖ Core Systems

‚Ä¢ `!drop`: Users can claim 2 randomized cards every 8 hours. Enforce cooldown via `last_drop_ts`.
‚Ä¢ `!mycards`: Lists owned cards, sorted by rarity (ascending: Common ‚Üí Mythic) then alphabetically.
‚Ä¢ `!cardinfo [name or ID]`: Shows card details including image, rarity, description, and stats.
‚Ä¢ `!addcard [rarity] [name_with_underscores] [description_with_underscores_for_newlines]`: Admin-only. Accepts image attachment and stores it with the card.
‚Ä¢ Assign a UUID to each dropped card instance.
‚Ä¢ Track credits per user for future microtransactions.
‚Ä¢ Validate rarity against this hierarchy: Common, Uncommon, Exceptional, Rare, Epic, Legendary, Mythic.


üß± Database Schema

Create the following tables:

-- Player profile and cooldown tracking
CREATE TABLE players (
  user_id BIGINT PRIMARY KEY,
  credits INT DEFAULT 0,
  last_drop_ts TIMESTAMP WITH TIME ZONE
);

-- Master card definitions
CREATE TABLE cards (
  card_id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  rarity TEXT NOT NULL,
  description TEXT,
  image_url TEXT,
  stats JSONB DEFAULT '{}'::jsonb,
  created_by BIGINT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Player-owned card instances
CREATE TABLE user_cards (
  instance_id UUID PRIMARY KEY,
  user_id BIGINT NOT NULL,
  card_id INT REFERENCES cards(card_id),
  acquired_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  source TEXT
);

üß† Sorting Logic

‚Ä¢ `!mycards` sorts by rarity using the defined hierarchy, then alphabetically by name.
‚Ä¢ Display card name, rarity, and image (if available).


üîê Permissions

‚Ä¢ Admin commands restricted to bot owner or users in a configurable `admin_ids` list.
‚Ä¢ Validate image attachment in `!addcard`; reject if missing.


---

üß± Foundation for Future Features

Implement scaffolding for:

‚Ä¢ Recycling cards: Add a placeholder command `!recycle [instance_id]` that validates ownership and deletes the card. Do not credit user yet.
‚Ä¢ Trading system: Add a placeholder table `pending_trades` with sender_id, receiver_id, offered_instance_id, requested_instance_id, status.
‚Ä¢ Microtransactions: Store credits in `players` table. Add placeholder command `!buycredits` that simulates adding credits (no Stripe integration yet).
‚Ä¢ Card activities: Add placeholder command `!launch [instance_id]` that validates card ownership and logs the attempt. No gameplay logic yet.
‚Ä¢ Image updates: Add admin-only command `!updateimage [card_id]` that accepts a new image attachment and updates the card‚Äôs image_url.


---

üß™ Testing & Validation

‚Ä¢ Validate rarity input against allowed values.
‚Ä¢ Enforce 8-hour cooldown for `!drop`.
‚Ä¢ Ensure each dropped card gets a unique UUID.
‚Ä¢ Confirm image URL is stored correctly from attachment.
‚Ä¢ Confirm sorting logic in `!mycards` matches rarity + name.
‚Ä¢ Confirm admin-only commands are restricted.


---

üóÇÔ∏è File-Level Tasks

‚Ä¢ `db/migrations/0001_cardbot.sql`: Create all tables above
‚Ä¢ `cogs/cards.py`: Implement all commands
‚Ä¢ `utils/card_helpers.py`: Rarity sorting, cooldown checks, image validation
‚Ä¢ `tests/test_cards.py`: Unit tests for drop logic, sorting, and admin commands