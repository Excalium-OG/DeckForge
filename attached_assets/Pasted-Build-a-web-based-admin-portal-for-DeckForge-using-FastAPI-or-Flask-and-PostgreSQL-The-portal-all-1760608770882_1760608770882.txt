Build a web-based admin portal for DeckForge using FastAPI (or Flask) and PostgreSQL. The portal allows bot admins to manage collectible card decks for their Discord servers. Use Discord OAuth2 for authentication. Only authorized users can access or modify decks.

🎯 Scope
✅ Authentication
- Implement Discord OAuth2 login
- Store authenticated user’s Discord ID
- Restrict access to:
- Global admins (hardcoded or stored in admin_ids)
- Server managers (users who manage a server where the bot is installed)

🗃️ Database Schema
decks
CREATE TABLE decks (
  deck_id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  created_by BIGINT,
  created_at TIMESTAMP DEFAULT now()
);


server_decks
CREATE TABLE server_decks (
  guild_id BIGINT PRIMARY KEY,
  deck_id INT REFERENCES decks(deck_id)
);


cards (updated)
ALTER TABLE cards ADD COLUMN deck_id INT REFERENCES decks(deck_id);


rarity_ranges
CREATE TABLE rarity_ranges (
  deck_id INT REFERENCES decks(deck_id),
  rarity TEXT,
  drop_rate FLOAT,
  PRIMARY KEY (deck_id, rarity)
);



🛠️ Web Portal Features
🔐 Dashboard
- Show user’s Discord name and ID
- List servers they manage (via Discord API)
- Show current deck assigned to each server
- Option to switch decks or create a new one
➕ Create Deck
- Name the deck
- Set rarity tiers and drop rates (must total 100%)
- Save deck and assign it to the user’s server
✏️ Edit Deck
- Add/edit/delete cards in the selected deck
- Fields:
- Name
- Description (multi-line)
- Height
- Diameter
- Thrust
- Payload to LEO
- Reusability (dropdown: Expendable, Partially Reusable, Fully Reusable)
- Rarity (dropdown)
- Image upload (store as URL or base64)
📊 Rarity Editor
- View and edit drop rates for the selected deck
- Validate total = 100%
- Only editable by deck creator or global admin

🔐 Permissions
|  |  |  | 
|  |  |  | 
|  |  |  | 



🧪 Validation
- Prevent editing decks not owned by user (unless global admin)
- Validate rarity totals = 100%
- Validate image uploads and field types
- Prevent duplicate deck names per user

🗂️ File-Level Tasks
- web/main.py: FastAPI app with OAuth routes and admin views
- web/templates/: Jinja2 templates for dashboard, deck editor, card form
- web/static/: CSS and JS for UI
- db/migrations/0005_web_admin.sql: Create decks, server_decks, rarity_ranges


